[
    {
        "label": "pyautogui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyautogui",
        "description": "pyautogui",
        "detail": "pyautogui",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pygetwindow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygetwindow",
        "description": "pygetwindow",
        "detail": "pygetwindow",
        "documentation": {}
    },
    {
        "label": "ImageGrab",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "mss",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mss",
        "description": "mss",
        "detail": "mss",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "structural_similarity",
        "importPath": "skimage.metrics",
        "description": "skimage.metrics",
        "isExtraImport": true,
        "detail": "skimage.metrics",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ttk",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "win32gui",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "win32gui",
        "description": "win32gui",
        "detail": "win32gui",
        "documentation": {}
    },
    {
        "label": "get_monitors",
        "importPath": "screeninfo",
        "description": "screeninfo",
        "isExtraImport": true,
        "detail": "screeninfo",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sounddevice",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sounddevice",
        "description": "sounddevice",
        "detail": "sounddevice",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "save_fullscreen_screenshot",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def save_fullscreen_screenshot(filename):\n    screenshot = pyautogui.screenshot()\n    screenshot_np = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)\n    cv2.imwrite(filename, screenshot_np)\n    print(f\"✅ Fullscreen screenshot saved to {filename}\")\ndef save_dota2_window_screenshot(filename):\n    windows = gw.getWindowsWithTitle('Dota 2')\n    if not windows:\n        print('❌ Dota 2 window not found!')\n        return False",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "save_dota2_window_screenshot",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def save_dota2_window_screenshot(filename):\n    windows = gw.getWindowsWithTitle('Dota 2')\n    if not windows:\n        print('❌ Dota 2 window not found!')\n        return False\n    win = windows[0]\n    if win.isMinimized:\n        print('❌ Dota 2 window is minimized!')\n        return False\n    bbox = (win.left, win.top, win.right, win.bottom)",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "save_dota2_monitor_screenshot",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def save_dota2_monitor_screenshot(filename):\n    windows = gw.getWindowsWithTitle('Dota 2')\n    if not windows:\n        print('❌ Dota 2 window not found!')\n        return False\n    win = windows[0]\n    if win.isMinimized:\n        print('❌ Dota 2 window is minimized!')\n        return False\n    # Find which monitor the window is on",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "compare_images",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def compare_images(img1_path, img2_path):\n    img1 = cv2.imread(img1_path)\n    img2 = cv2.imread(img2_path)\n    if img1 is None or img2 is None:\n        return 0.0\n    img1_gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n    img2_gray = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)\n    # Resize to the same size\n    if img1_gray.shape != img2_gray.shape:\n        img2_gray = cv2.resize(img2_gray, (img1_gray.shape[1], img1_gray.shape[0]))",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "keep_last_n_files",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def keep_last_n_files(folder, n):\n    files = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith('.png')]\n    files.sort(key=os.path.getmtime, reverse=True)\n    for f in files[n:]:\n        os.remove(f)\ndef main_loop():\n    folder = 'debug_screenshots'\n    os.makedirs(folder, exist_ok=True)\n    ref1 = 'dota.png'\n    ref2 = 'print.png'",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "main_loop",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def main_loop():\n    folder = 'debug_screenshots'\n    os.makedirs(folder, exist_ok=True)\n    ref1 = 'dota.png'\n    ref2 = 'print.png'\n    while True:\n        filename = os.path.join(folder, f'screenshot_{time.strftime(\"%Y%m%d-%H%M%S\")}.png')\n        if not save_dota2_monitor_screenshot(filename):\n            filename = os.path.join(folder, f'fullscreen_{time.strftime(\"%Y%m%d-%H%M%S\")}.png')\n            save_fullscreen_screenshot(filename)",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "accept",
        "description": "accept",
        "peekOfCode": "def main():\n    filename = f\"dota2_monitor_screenshot_{time.strftime('%Y%m%d-%H%M%S')}.png\"\n    if not save_dota2_monitor_screenshot(filename):\n        # fallback to fullscreen screenshot\n        filename = f\"fullscreen_screenshot_{time.strftime('%Y%m%d-%H%M%S')}.png\"\n        save_fullscreen_screenshot(filename)\nif __name__ == \"__main__\":\n    main_loop()",
        "detail": "accept",
        "documentation": {}
    },
    {
        "label": "DotaAutoAccept",
        "kind": 6,
        "importPath": "dota_auto_accept",
        "description": "dota_auto_accept",
        "peekOfCode": "class DotaAutoAccept:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"Dota 2 Auto Accept\")\n        self.root.geometry(\"520x420\")\n        self.root.resizable(False, False)\n        self.root.configure(bg='#1a1a2e')\n        self.reference_image_path = self.resource_path(\"dota.png\")\n        self.reference_image = cv2.imread(\n            self.reference_image_path, cv2.IMREAD_COLOR)",
        "detail": "dota_auto_accept",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dota_auto_accept",
        "description": "dota_auto_accept",
        "peekOfCode": "def main():\n    root = tk.Tk()\n    app = DotaAutoAccept(root)\n    app.start_script()\n    root.mainloop()\nif __name__ == \"__main__\":\n    main()",
        "detail": "dota_auto_accept",
        "documentation": {}
    }
]